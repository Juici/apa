name: ci
on:
  pull_request:
  push:
  schedule:
    - cron: '00 01 * * *'

env:
  # Coloured output from Cargo.
  CARGO_TERM_COLOR: always

# Based on the ripgrep ci workflow.
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/ci.yml
jobs:
  test:
    name: test
    env:
      # For some builds, we use cross to test on 32-bit and big-endian systems.
      CARGO: cargo
      # When CARGO is set to `cross`, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          # Minimum supported version.
          - pinned
          # Standard toolchain versions.
          - stable
          - beta
          - nightly
          # Test on 32-bit and big-endian systems.
          - nightly-32
          - nightly-mips
          - nightly-arm
        include:
          - build: pinned
            os: ubuntu-latest
            rust: 1.47.0
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: beta
            os: ubuntu-latest
            rust: beta
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: nightly-32
            os: ubuntu-latest
            rust: nightly
            target: i686-unknown-linux-gnu
          - build: nightly-mips
            os: ubuntu-latest
            rust: nightly
            target: mips64-unknown-linux-gnuabi64
          - build: nightly-arm
            os: ubuntu-latest
            rust: nightly
            target: arm-unknown-linux-gnueabihf
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          profile: minimal

      - name: Use Cross
        if: matrix.target != ''
        run: |
          cargo install cross
          echo "::set-env name=CARGO::cross"
          echo "::set-env name=TARGET_FLAGS::--target ${{ matrix.target }}"

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"

      - name: Build
        run: ${{ env.CARGO }} build --verbose --no-default-features --features std ${{ env.TARGET_FLAGS }}

      - name: Build (no_std)
        run: ${{ env.CARGO }} build --verbose --no-default-features ${{ env.TARGET_FLAGS }}

      - name: Run tests
        run: ${{ env.CARGO }} test --verbose --no-default-features --features std ${{ env.TARGET_FLAGS }}

      - name: Run tests (no_std)
        run: ${{ env.CARGO }} test --verbose --no-default-features ${{ env.TARGET_FLAGS }}

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          profile: minimal
          components: rustfmt

      - name: Check formatting
        run: cargo fmt -- --check
